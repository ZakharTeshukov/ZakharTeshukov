in this AP Computer Science a video  we're going to cover unit 7 array list  functionally an array list is similar to  an array but we use different commands  to create and access them also the array  list has some additional features  algorithms you wrote for one-dimensional  arrays in unit 6 can be modified to work  with an array list depending on the  circumstances it may make sense to  implement an algorithm using either an  array or an array list check the time  stamps to jump to specific topics and  check the video description for other  resources let's start by creating a  standard array and taking a look at  it we can see that we've created an  object with a fixed size and  memory if we want we can change the  values in individual  indexes but it's always going to be an  array of size four unless we replace the  entire  array before we create an array list we  need to import the array list class we  do this right before we declare the  current class  now let's create an array list the  syntax is a bit different we declare a  variable as an array list of a data type  in this case string and tell it to point  at a new array list  object this creates an empty array list  of size zero unlike an array an array  list will resize itself on demand if we  want to add an object to an array list  we use the ad method there are two  versions of the ad method let's try out  the first for the first version of the  ad method we say the name of the array  list variable do add and put the object  we want to add in parentheses it will  add the object to the end of the list  let's add a second  string in the other version of the ad  method we can specify where we want the  new object added this will put the  string tuna into index one and slide  everything after it down to a new  index the one parameter version of AD  always returns true while the two  parameter version doesn't return return  anything if we want to replace the  object in an index with another object  we can use the set  command this replaces the object in  index one with the string  bass we can also do this with an array  this is a comparable line of code to  overwrite the object in index one of the  array in an array list we can also  remove an object this removes the object  at index one and everything else slides  down to fill in the Gap remove also  Returns the object that it removes if  you want you can store the removed  object in a variable like  this when you are programming don't  forget that adding or removing an object  from an array list causes everything  after it to slide down and be renumbered  forgetting this is a common cause of  bugs and M test questions you can add an  object to an existing index or to one  after the last index for this array list  we could add to index zero one or two  when removing you can only remove from  an existing index for this array list we  can remove index zero or one  if we want to retrieve a value from an  array list we use the git method you can  either print out the object we retrieve  or store it in a  variable this would be a comparable line  of code for an  array a limitation of array lists is  that unlike arrays they can only hold  object types for example we couldn't  create an array list of int to get  around this we use rapper classes  wrapper classes encapsulate or wrap the  Primitive value in an object that we can  put in an array list each primitive type  has a corresponding wrapper class for an  INT the wrapper class is integer for  double the wrapper class is double with  a capital D when you want to store  primitive types in an array list make  sure to use the correct wrapper class in  the old days when we wanted to add an in  to an array list of integers we would  have to wrap it up ourselves integer.  value of five would wrap the Primitive  value five into an object that would  then get added to the my numbers array  list if we want to unwrap it we would  also have to do it man  manually my numbers. g0 returns an  integer object from the array  list do int Val calls the int Value  method from that object which unwraps  and Returns the Primitive  value these days we can use autoboxing  that wraps and unwraps the Primitive  types for  us however a occasionally autoboxing  doesn't work the way we want so it is  useful to know the methods to do it  manually another useful feature of array  list is we can just print it  out this will give us a reasonable  approximation of the array list if we  tried this with an array we would get  gibberish we can use a for Loop to print  out the values of an array or array list  let's start with an  array  here's how we could do it with an array  list notice the different ways that we  access each element also notice the  different ways we access the length with  an array we use a DOT length without  parenthesis after it with an array list  we use a DOT size with parenthesis after  it as a reminder if we wanted the length  of a string we would use dot length with  parentheses after it  in this tutorial you'll learn more about  traversing an array list let's write  some code to create an array list we  start by declaring a variable of type  array list and then initialize it with a  new array list object with the values  three 1 and 8 this is a technique to  quickly hardcode values into the array  list you won't see it done this way on  the AP test for the purposes of the AP  test you should expect to see nums  created as an empty array list  and then 3 1 and 8 added  individually now let's look at some code  that will allow us to Traverse the array  list we can use a standard for Loop we  start off by initializing I as zero and  we will continue as long as I is less  than nums do size the array list nums  has a size of three however like arrays  array list are zero indexed that means  the first index is index zero the next  one is IND index one and in this case  the final index is index 2 if we use the  git method it's important to make sure I  is less than the size of the array list  so we don't try to access a non-existent  index and crash with an index out of  bounds exception the size is  recalculated before each iteration of  the for Loop so if we add or delete  elements in the array list during the  execution of the loop the size will  change in this code we retrieve the  value at each index and then output it  to the console however we could also use  the set remove or add methods inside the  loop if we wanted to modify the contents  of the array list for the G set and  remove methods we can only access  existing indexes in this case the  existing indexes are 0er 1 and two for  the add method we can add one past the  last index in this case we could pass  the ad method indexes 0 1 2 or 3 it's  important to be cautious when adding or  removing objects while traversing an  array list because it will cause the  other objects to slide over and have  their indexes renumbered this can cause  an object to either be accessed twice or  skipped entirely now let's learn about  traversing using a for each Loop also  known as an enhanced for Loop the first  part creates a variable to hold a copy  of the values in the array list the  variable in this case called temp needs  to be capable of holding the data stored  in the array list in this case  autoboxing automatically unwraps the  integers in the array list so an intype  variable can hold them next there is a  colon finally the name of the array list  variable or alternatively the name of an  array variable a for each Loop will  cycle one time for each element in the  array list in this case the loop will  iterate three times the first time  through temp will hold three the second  time temp will hold one and the third  time temp will hold eight a disadvantage  of a 4 each Loop is that you don't know  where you are in the array list without  a counter variable like I you can't  check a value and then modify it because  you don't know the index of the value  stored in temp while you can change the  value of temp temp only holds a copy of  the data so changing it won't affect the  data in the array  list in this lesson you'll learn to  write an algorithm that searches through  an array list list and removes all  target values then we'll look at some  useful variations on the algorithm we'll  start with the class shopping list it  has an instance variable items that is  an array list of string here's a  Constructor that initializes the  instance variable the body of the method  remove an item is currently empty we're  going to write our algorithm here the  method has a string parameter item to  remove we'll search the array list items  for Strings matching item to remove and  then remove those indexes in this  program we are traversing an array list  of string so our parameter is a string  if the array list held a different type  of data the parameter item to remove  would need to match that data type this  version of remove an item will monify  the items field but won't return  anything so its return type is void we  will start by writing a for Loop to go  through each index in the array list  normally when we Traverse an array list  we start at the beginning and go to the  end how however when an item is removed  from an array list everything after it  slides down and the indexes are  reassigned this can result in skipping  over an element when the previous one is  removed the easiest way to avoid this is  to start at the end the last string is  always one less than the size so we'll  start at size minus  one the first index will be index zero  so we want to continue as long as I is  greater than or equal to zero after each  cycle of the loop we decrease I by one  inside the body of the loop we create an  if  statement we call the git method from  the array list variable items and  retrieve the object at index I how we  proceed from here depends on what type  of objects the array list holds this  array list will retrieve a string object  so we'll use the equals method from the  string class to compare it all object  types have an equals method but they  don't all work the way we want in the  case of the string class the equal  method works properly we pass the  parameter item to remove to the equals  method if the string in index I is  exactly equal to the string in item to  remove the equals method will return  true the equals method also Compares  capitalization so if you don't care  about the capitalization use the equals  ignore case method instead if this were  an array list of integers or doubles we  could use the comparison operators such  as greater than less than than double  equals Etc if the object at index I  matches the object in the parameter item  to remove then we want to remove that  object we call the remove method from  the items variable and pass it the value  of I this will cause it to remove the  object in the index at the current value  of I all the objects after it will slide  down into the empty space and have their  indexes renumbered now let's look at a  variation of this algorithm let's say we  want to keep track of of how many  objects we remove from the array list  and return that value first we change  the return type from void to  int next we create a count variable and  start it at at zero every time we remove  an object we increment count by one  finally after the for Loop completes we  return  count next let's modify the algorithms  to search for partial matches for  example if a string in the items array  list is hot dogs and item to remove is a  dog that would be considered a match to  do this we will replace the equals  method with the contains method an  alternative way to do this is to use the  index of method and check if it returns  a value that is not equal to -1 a value  other than -1 indicates that item to  remove is somewhere inside the string at  index I finally let's modify the  algorithm to return an array list  containing all of the removed values we  change the return type to array list of  string next we'll create an empty array  list of string to store the removed  items when the remove method is called  from an array List It Returns the object  that was just removed right now we  aren't doing anything with that returned  object let's store it in a string called  temp removed  If instead of being an array list of  string items were for instance an array  list of double then temp removed would  be a double variable now we'll call the  add method from the removed items  variable and pass it temp removed so it  gets added to the end finally we return  the removed items array list we still  have the count variable even though we  are no longer using  it for some algorithms it's easier to  write them if you have your data in an  array list instead of an array that's  because an array list will resize itself  automatically and it's easy to add or  remove items from the middle of the list  so here we have an array of int with  some values in it and we're going to  copy this to an array list if we want to  work with array list the first thing we  have to do is import java. u.  arraylist next we're going to create the  array list that we're going to copy the  data into array list Can Only Hold  object types int is a primitive type so  we're going to have to use the  corresponding object type which is a  wrapper class the wrapper class for INT  is integer so we're going to say array  list of integer we'll call it an array  list equals new array list of integer  then open close  parentheses so now we've got an empty  array list of integer we need to copy  over each of the elements the easiest  way to do this is using a four for each  Loop which goes through each element in  the array we type for the temporary  variable needs to be the same data type  is the array so int I usually call my  temporary variable temp then a  colon and we're going through an array  in this case since an array is length  six it'll repeat the for Loop six times  and each time Temple hold a different  value from the array as we're traversing  an array we're going to add the values  that are temporarily stored in temp to  the array list we've named an array list  so we'll say an array list we'll call  the add method and then we'll add  whatever is in the temp variable at the  moment this is all there is to it in  this case it will Loop through six times  and it's going to take out each  individual index and put it at the end  of an array list to make sure it works  let's system out print line and array  list we can use system out print line on  an array list we couldn't do this  successfully with an array let's run  this and there's the array list and it's  exactly the same as the array you've  reached the end and if you have a test  coming up good luck tell me in the  comments was the pace of this video too  fast too slow or about right check out  the other resources in the video  description and on the channel and I'll  see you  soon