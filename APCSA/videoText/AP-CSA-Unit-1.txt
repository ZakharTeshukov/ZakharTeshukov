hello welcome to the new ap computer  science a series unit 1.  if you want to jump ahead to a specific  topic check out the time markers in the  description  also i will be adding to and updating  the series  so make sure to hit the subscribe button  to keep up to date on all the content  here i'm using the jgrasp ide you can  use whatever one you want but for  instructions on how to install jgrasp  check the video description to begin  with we must declare a class  every program in java must have at least  one class  to do so we'll type on the first line  public  class and then the name of our class  in java classes names are written in  pascal case  that means all words are run together  and the first letter of every word is  capitalized  i'm going to call my class my first  program our class name  must match our file name exactly except  our file name will have  java at the end otherwise the program's  not going to build  next we have to define for the computer  where the class begins and  ends we do that with curly brackets  we'll start with an opening curly  bracket  and close within closing curly bracket  inside our class we need methods every  program must have at least one main  method  that tells the computer where to start  when we run the class  a main method must be written exactly  like this  public static void  main open parenthesis spring with a  capital s  open close square brackets args  close parenthesis next we need to define  where our main method begins and ends  so we do it that with curly brackets  again our main method begins  after this curly bracket and ends after  that curly bracket  an important rule with curly brackets is  when we open one  everything after that is indented one  more line when we close one  everything after that is indented one  less line  the next command we're going to learn is  the system out print line  what that'll do is let us output  something to our console down here so we  have system with a capital s  period out that period pre-r int  ln and then we have an open close  parenthesis  inside here is the information or the  data we want to go to the console  in this case we're going to use  something called a string literal  a string literal is some very specific  text or numbers  so we're going to open and close  parentheses that lets the computer know  there's going to be a string literal  inside here  and my message is going to be hello  world  we must end this line with a semicolon  certain lines of code must end with a  semicolon like system out print lines  other ones like public static void main  or the class name  do not end with a semicolon we have an  open and closed bracket  to define where the main method or the  class begins and ends  let's check if we did everything right  what we're going to do is we're going to  go to build  and compile this might look different if  you're using a different ide  but it'll be the exact same concept what  this does is  text the program for errors and converts  it to  bytecode which the computer can run  this didn't give us any errors that  means as far as it can tell we didn't  make any mistakes  now this is ready to be run so i'm going  to go to build  run and our program ran  and outputted hello world to our console  in this lesson we're going to learn  about using variables  variables are letters or words that can  store and manipulate data for us  i'm going to start by declaring a  variable inside the main method  variables declared inside a method are  called local variables  because they are local to the method  that we've created them inside  so i'm going to declare a variable x of  type int  int x ins  can hold any whole number within a large  range  next we need to initialize x we need to  give it initial value  before we really do anything with it i'm  going to initialize  x by setting it equal to 10. now that it  has an initial value i can change the  value  to 5 i can increment it  for example i could set x equal to x  plus one this is going to take the  current value of x which is five  add one to it it'll become six and that  number six  will go become the new value of x  in java we can think of the single equal  sign as being like a left pointing arrow  the data on the right side of this  expression will be calculated  and then go into the left side of the  expression  which is holding the variable x  the naming conventions for variables in  java is lower camel case  it's the same with method names that  means if we have  one word or letter it starts off and is  lower case  if we have multiple words they're all  run together with no spaces  and the first letter of every word  except for the first word is capitalized  so i'm going to declare another int i'm  going to call  it my final score  i have three words they all run together  the second and third word start with a  capital letter the first word starts  with a lowercase letter  in this case i'm going to choose to  declare and initialize  on the same line  now what i want to do is i want to  output the value of one of my variables  so i'm going to say system out print  line  open close parenthesis i want to output  the value that is stored inside the  variable  i'm going to choose my final score  notice there aren't quotation marks  around my final score  if there were it would print out my  final score  since there's no quotation marks it's  going to output  the value stored inside the variable my  final score  let's end our system out print line with  a semicolon  next let's build it we're going to go to  build compile  the compiler check to see if it could  find any errors and convert it to  bytecode  so far it looks like there isn't a  problem so we're going to run it  we're going to go to build run and  outputted the value stored in my final  score  which was 10 to our console  in this java tutorial we're going to  learn about the eight primitive data  types that are built into java  the first four are byte short  int and long these all hold integer  values  but within different ranges the next two  float and double hold decimals but  double has more precision  next boolean can hold either true or  false  and finally care or car can hold a  single character  the ones we're going to focus on are int  double and boolean because these are  among the most useful  if you're studying for the ap computer  science a exam  these are the three that you need to  know for the test  let's start by declaring an int a and  setting it equal to the whole number  three  next let's create a double b  and set it equal to 3.0 the compiler  knows that this is an  int because it doesn't have a decimal  and it knows this is a double  because it does have a decimal even  though these two values are equal  if we want we could set b equal to the  integer 3  and the compiler would know to convert  this to 3.0 for a double  however it doesn't work the other way  around if we typed in  a equals 3.0 it would not know to  convert it  because it would fear a loss of  precision  so the error we're going to get here is  incompatible types possible lossy  conversion  we can make this work by using something  called casting  casting converts it to another data type  we're going to cast this 3.0 as an  int so it will cut off everything after  the decimal point  before assigning the value to a we need  to be careful with this because if the  value were 3.99  it would cut off everything after the  decimal point and then a would equal 3.  it's important to know that casting a  double to an  int does not involve rounding it  involves cutting  everything off after the decimal  and there's our value 3. next let's look  at a boolean  we'll create a boolean c we'll set it  equal to true  we could change it later set it equal to  false if we wanted  for more information on the technical  details check out this website  you can reach it by typing primitive  data types oracle  into google and then choosing the first  result  in this java tutorial we are going to  review the simple assignment operator  we are going to learn about the  arithmetic operators and we are going to  learn about the unary operators  so first let's review the simple  assignment operator  we could use an example we have int x we  declared  x we want to set x equal to three so we  would do that  the simple assignment operator which  uses a single equal sign  it can be thought of as a left pointing  arrow whatever  is on the right side of the expression  is calculated  and put into the variable on the left  side of the expression  now let's talk about the arithmetic  operators we could use them two ways  first we could say system out print line  and have it calculate  whatever was inside here so it would do  three plus three which would be six  and then it would output the number six  we could also use subtraction  multiplication or division division is  handled differently depending on whether  we are dealing with an int primitive  type  or a double primitive type we will learn  more about how this works later in the  video  we can also use it to change the value  of a variable for example we could say  x equals 3 times 3.  or if we wanted to modify the value of x  based on an old value of x we could say  x equals 3 times x  which would take the old value of x  multiply it by 3  and then take that product and put it as  the new value of x  the one arithmetic operator you might  not be familiar with  is the mod operator or the remainder  operator  how this works is  we would divide the first number  by the second number and then we would  take the remainder  so for example 3 goes into 4 one  complete time  and then there is a remainder of one so  in this case it would output the number  one  we said is the remainder  there we go our number one if we did 11  mod 3 3 goes into 11 3 full times  and would leave a remainder of 2 so this  would output  2.  finally let's look at the unary  operators they can be used for shortcuts  for example if we had x equals x  plus one that would take the old value  of x  add one and make that's a new value of x  we could simplify that by saying  x plus plus which is the shorthand for  x equals x plus 1. same thing with x  minus minus would be shorthand for x  equals x minus 1.  there is another shortcut that we can  use with the other  arithmetic operators for example  x times equals 3  would be shorthand for x equals  x times three  finally we have the not operator so if  we had a boolean  z equals true  and then we wanted to say system out  print line not which is the exclamation  point z  the opposite of z which is true would be  false  so this would print out false for us  in this java tutorial we are going to  learn about division with the inter  primitive type  and division with the double primitive  type they behave differently  let's start with int and let's look at  some examples  for example if we divide the number 5  divided by 3  both of these are ins so they're going  to be treated  with int division 5 divided by 3 equals  1.6 repeating  however ins can't support any decimal  portion of the number  so we'll cut everything off after the  decimal and just give us an output of  one  doubles behave differently if one or  both of the numbers is a double  it will use double division so we divide  5.0  which is a double by three  it's not going to round until we get to  the last digit  dividing by zero behaves very  differently with ins versus doubles  for example if we divide by zero  five which is an int divided by zero  which is an int  we're going to get an error because we  can't divide by zero using in  division  here's our error arithmetic exception  divide by zero on the other hand if  we're using double division  we can divide by zero the output will  depend on the numbers  here i'm just going to change one of the  numbers to a double  and since one of the two is a double it  will treat it with double division  since the numerator is a positive number  we are going to get  a positive infinity  if the numerator were a negative number  i'm going to make this double  just to show as an example we're going  to get  negative infinity  if both the numerator and the  denominator are zero  we're going to get n a n which stands  for  not a number  so we have to be careful if we're  risking dividing by zero  if we're dealing with ins if we're  dealing with doubles we may be okay  dividing by zero because we will end up  with either a positive infinity  a negative infinity or a not a number  value  in this java tutorial we are going to  learn about operator precedence  this is sometimes also called order of  execution  or order of operation  some important facts to know like in  math  some operators will be processed first  depending on their precedence  if precedence is the same most  operations are generally processed  left to right like in math it is best to  use parentheses to clarify the order of  execution  we want to make it as easy as possible  for other programmers to understand our  code  even if they don't have a perfect  understanding of order of execution  let's look at this simplified table to  let us know what comes first and last  this will cover about 99 of the  circumstances you're going to run into  we can see we start with parentheses  then increment and decrement and not  then casting like casting to an int or a  double  then we have multiplication division mod  addition or concatenation and  subtraction all the comparative  operators  and an or for the most part you're just  going to have to worry  about the ones highlighted in yellow  here  now let's look at some code that we can  trace out  we see the sop for the purpose of this  video this stands for system out print  line  we have our representation of our memory  stack here  and then our output  for ease of viewing i've color-coded the  parentheses  to indicate their level so the outermost  will be red  then the middle ones are green and then  the innermost or blue  let's start tracing out the code  we'll start by declaring x and setting  it equal to five and we see it appears  on the stack  then we'll declare y and set it equal to  six and we see it's also here on the  stack  since parentheses have the highest  precedence we're going to look for the  innermost parentheses which are right  here  there's only one operator inside these  parentheses  subtraction so we're going to evaluate  5 minus 2 which gives us  3. next we have to look at the other  parentheses  we have two green parentheses however  this one is further left so this one is  going to take precedence  inside these parentheses we have two  operations  subtraction and multiplication we can  see multiplication takes precedence  so we're going to go and do one times  two which will be  two we have one more operation  inside these green parenthesis three  minus two  which gives us one  now we are finished with this set of  parentheses  so we'll go over to this other green set  of parentheses  there's only one operation left inside  here 3 times 3  so that'll evaluate to 9.  next we are in our outermost set of  parentheses  so we've got several different  operations we've got  a cast we've got a plus plus  incrementation  we've got division and we've got a  greater than  we can see the plus plus increment it  takes  highest precedence so we'll do x plus  plus since the plus plus is  after the variable this means that we  will  increase the value of x in the stack but  for the purpose of this  x it will remain at five  now we'll replace this x with a 5  as we increase the value on the stack to  6.  next is cast so we're going to cast this  5  as a double and 5 as a double is  5.0 now we see  next is division so we'll do  5.0 divided by 1  which will remain 5.0  we have one final operation that's  checking  is 5.0 greater than 9  this evaluates to false so now we system  out print line  false and then we output it to the  console  here  in this java tutorial we're going to  learn about two things  the first is how to cast a primitive  value and the second  is overflow some important facts to know  first casting primitive data types  allows us to convert a piece of data  from one primitive type to another  widening means converting to a data type  with either more precision as in more  decimal places  or more space is in larger or smaller  values  narrowing means converting to a data  type with either less precision  or less space for ap computer science a  you only need to know about the three  primitive types int  double and boolean we will be covering  some of the others in this lecture  let's start by looking at some code so  here we have our code  here we have the data on the stack  memory and here we have some notes  we'll start by declaring a variable a of  type double  and initializing it to be 3.0 then we'll  add it on the stack here  next we'll notice that here we're  setting double b  equal to 4. the 4 is an int  and the b is a double this is what we  call  widening because 4 needs to be widened  to 4.0  adding precision this can happen  automatically  so then when we place it on the stack it  automatically  converts it to 4.0  now let's look at another example here  we have double c equals double 5.  the double here is manually casting it  to a double  this is a good practice because it lets  other programmers know what's going on  but it's not required in the case of  widening  here we're declaring a variable d and  setting it equal to c  this will cause an error when we compile  because  c needs to be narrowed to fit into an  int value  narrowing must be done manually for  example if we said  in d equals and we manually cast it as  an  ant c this would work then we would  narrow the value  5.0 into the in value 5.  next let's look at this example we have  int e  and we're casting 3.95 as an int  it's important to understand when we  cast a double as an int  we lose the entire decimal portion of  the number  so we don't round we truncate after the  decimal point  therefore e will be set equal to the int  3.  next let's look at an example where we  have to deal with overflow  here we have int x equals 10. we'll  place that on the stack  it's important to know that ins go to a  value  from about negative 2 billion up into  a value of about positive 2 billion  here we're declaring a variable of the  primitive type byte y  we haven't initialized it yet bytes can  have a minimum value of negative 128  and a maximum value of 127.  on this line of code we are setting the  byte y variable  equal to x this is going to generate an  error  because we need to narrow x in this case  the value of x 10 is well within the  range of what a byte can hold  however the compiler is going to be  concerned that x may not always be  within the range we want  therefore we need to manually cast the  int x as a byte  and then we can set y equal to it in  this case  y equals 10. there's no need for any  loss of data  in this example we're casting the number  128 as a byte  we can see positive 128 is greater than  the maximum value a byte can hold  this will cause an overflow where this  number is larger than our data type can  hold  in the case of byte that means it'll  roll over to the minimum value  the minimum value will be negative 128.  other data types can roll over two when  they overflow  bite short int and long will all  overflow and wrap around to the other  side  the primitive type double and float will  not wrap around when they overflow  instead they will go to infinity if the  value is too high  or negative infinity of the value is too  low  casting is one example of when we can  have an overflow  however we can also overflow a variable  when we add past its highest value or  subtract past its lowest value  we're going to learn about how to swap  the values of two variables  sometimes we want to switch the values  of two variables  the most universal way to do this is  with a temp variable  there are other ways to swap values  without temp variables  but they only work with certain data  types we won't cover those  let's start by declaring a couple of  variables and initializing them  we'll declare a variable x set it equal  to 3  then we'll declare our variable y and  set it equal to 9.  we'll start by discussing a wrong way  that many new programmers try  they set x equal to y and y equal to x  expecting that it'll swap the values of  these two variables  let's trace it to see what's going to  happen we set x equal to y  so it copies the y value to the x then  we set  y equal to x which copies the x value to  the y  and they both end up at nine however we  wanted to swap  these values we wanted x to be 9 and y  to be 3.  now let's look at the right way we start  by creating a temp variable  and copying the value of x into the temp  variable  next we copy the value of y  into the variable x finally  we copy the value of temp into the  variable y  now the values are switched y is three x  is nine  compared to the other way around when we  started  thanks for watching if you enjoyed the  video please hit the like button and  then leave me a comment down below  to see the next video click on the image  on the left side of the screen  to see the entire playlist for the  series click on the image on the right  side of the screen  and to keep up to date on all the latest  content just a subscribe button in the  middle