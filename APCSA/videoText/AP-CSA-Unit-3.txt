hello welcome to the new ap computer  science a series unit 3.  if you want to jump ahead to a specific  topic check out the time markers in the  video description  also i will be adding to and updating  this series so make sure to hit the  subscribe button to keep up to date on  all the latest content  in this java tutorial we are going to  learn about boolean expressions and how  to use them with equality  relational and conditional operators  first let's discuss what a boolean  expression is  a boolean expression is a mathematical  expression that can evaluate either true  or false  this one evaluates to true  this one evaluates to false one of the  many things we can use boolean  expressions for is inside an if  statement for example if we say if 3 is  greater than 2  then if this boolean expression is true  the code inside these curly brackets  will execute  if it is not true it will skip the code  inside the curly brackets  first let's talk about relational  operators  relational operators are  either equals or not equals so if we say  three  equals two  is checking to see if these two are  equal  when checking equality with primitive  types we use double equals  this is different than single equals  where one is set to the value of the  other  we only want to use double equals with  primitive types there's another way to  check equality with objects that we will  discuss later  the other equality operator is not equal  this expression is true because three is  not equal to two so the code inside the  curly brackets will execute  the four relational operators we want to  know about are  greater than  less than  greater than or equal to  or  less than or equal to  if we do 3 is less than or equal to 2  this is a false statement so it will not  execute the code here  we often use boolean expressions in  conjunctions with variables for example  we might say something like x is less  than or equal to 2.  next let's talk about conditional  operators conditional operators allow us  to combine two or more boolean  expressions into a compound boolean  expression  for example if we said x  is less than or equal to  four  and  x is less than  three  then both of these would have to be true  to execute the code inside the curly  brackets  since 5 is not less than or equal to 4  it is not even going to check the second  part this is called short circuiting  this can be important in situations  where the second part of a compound  boolean expression might cause an error  for example if we had five divided by  zero is greater than three  this will cause a crash because we can't  divide an int by a zero  however since this first part is false  it's not even going to check the second  part  and the program will execute without  error  on the other hand if the first part is  true  it will execute the second part to check  if the second part is true to see if the  full expression is true and this will  crash with an error  arithmetic exception error divide by  zero  we also have an or  operator  or we'll check if either or is true  so for example we could say x  is greater than  3  or  x  is equal to  10.  in this case it won't check the second  one because the first one is true since  only one of the two needs to be true  it won't check the second one  again this can help us in a situation  where the second one will cause a crash  since the first one is true it doesn't  bother checking the second one and just  executes the code inside the brackets  on the other hand if the first one was  not true it has to check the second one  to see if either of them are true  and of course this will cause a crash  so remember for and or or we can have a  short circuit situation where the second  part of the expression is not evaluated  because it isn't necessary  in this java tutorial we're going to  learn about if  else if and else  these commands allow the program to  execute or not execute a block of code  depending how a boolean expression  evaluates  for more information on boolean  expressions please click on the link in  the upper right hand corner of this  screen  some important facts to know  if and elseif require a boolean  expression well else does not  an elsif must have an if or another  elseif to latch on to we'll discuss how  this works in a later slide  also an else must have an if or an elsif  to latch onto  let's write a code with several if  expressions  if expressions are unconnected to each  other unless they are nested within each  other  so one two three or none of these  statements could execute independently  let's trace the code here  we start off by declaring x and setting  it equal to five  next we evaluate the boolean expression  in the first if statement x is less than  10 whereas x equals 5 this is a true  statement so we execute the block of  code attached to the if and output the  letter a  next we evaluate the boolean expression  in the next if statement x is less than  four this is a false statement so we  skip the block of code  finally we evaluate the expression x is  less than seven this statement is true  so we execute the attached block of code  and output the letter c  now let's move on and look at else  statements  here we've got a block of code that has  an if or an else this else latches on to  this if in such a way that if this  boolean expression is true the if's  block of code will execute or if this  boolean expression is false the else's  block of code will execute  let's trace this out we start off by  declaring y is equal to 5.  we evaluate the boolean expression y is  greater than 10 this expression is false  so we execute the block of code attached  to else and we output the letter e  next we're going to take a look at else  if statements so we've got an if two  else ifs and an else  this section of code must be considered  together  here's how it's going to work we have an  if statement if this if statement  evaluates to true we'll execute this  block of code and ignore all the else  ifs and else  if it evaluates as false we will  continue on to the else if if this first  elsif evaluates to true we will execute  this block of code and skip everything  else  we will keep doing that until we hit the  final else if nothing evaluates to true  then we will execute the block of code  attached to the else  let's trace this out  we start off by declaring z and  initializing it to 5.  next we evaluate the expression z is  greater than 10 this expression is false  so we skip the if's block of code and  continue on to the else if  the else is expression z is greater than  or equal to four this is true so we  execute the block of code attached to  the elsif output g and skip everything  else  next we are going to look at another way  to attach code to an if or an else  expression  if we are only using one line of code  we don't need to include the curly  brackets we just indent it to let other  programmers know that it is part of the  if the elsif or the else  remember this only works if we only have  one line of code  next let's look at some common mistakes  programmers make  the first is to put a semicolon after  the if the elsif or the else  this takes that statement out of the  equation and will execute the block of  code in the curly brackets regardless  another problem this can cause is if we  have an else we will get a compiler  error that says else without an if  that's because the else doesn't see the  if and can't latch onto it because there  is a separate block of code in between  it that is not attached to the if  another mistake programmers sometimes  make is they attach a boolean expression  to an else statement  only if and elseifs need a boolean  expression else's do not  another mistake that programmers  sometimes make is they forget to add  curly brackets if they want to have more  than one line of code attached to an if  or an else if  in this case since we have two lines of  code we need to use the curly brackets  to denote the beginning and the end of  the code attached to this if  in this java tutorial we are going to  learn about nested if  else if and else statements  before watching this tutorial you're  going to want to have a general  understanding of if else if and else  statements  some important facts  and if else if an else can be nested  inside a block of code attached to  another if else if and else  other control structures like while  do while  for and others can also be nested inside  each other  let's look at a sample of some code  here we have an outer if else statement  and inside the if we have a secondary if  elsif and else statement and inside the  else block of code we have another if  and else if statement  these statements will only be evaluated  if this boolean expression is true  these statements will only be evaluated  if this boolean expression is false  let's examine this code more closely  it can be helpful when preparing to  trace a series of if and else statements  to first identify which ones are  attached to the other ones  first we can see that this if is  attached to this else  so depending on how this boolean  expression evaluates we'll either do  this block code or this block of code  if we end up running this block of code  we can make a notation that these if  else if and else are connected  this elseif will check if this boolean  expression is false  and if both of these boolean expressions  are false  this block of code will run  on the other hand in our else block  this if and this elsif are attached if  this boolean expression evaluates to  true we will run this line of code  if this doesn't evaluate to true we will  check this line of code and if this one  does evaluate to true we will run this  line of code  if neither of these boolean expressions  evaluate to true we won't do either of  them  now let's try tracing this code  first we're going to start by declaring  x is equal to 5 and that will appear on  our stack  next we're going to declare y and set it  equal to 3 which also appears on our  stack  now we evaluate this boolean expression  x is less than 10.  x is in fact less than 10 this evaluates  to true so we will run this block of  code  next we evaluate the  y is not equal to three  y is in fact equal to three so this is a  false statement and we're going to go on  and check the second boolean expression  attached to this else if  y is less than or equal to five so this  evaluates to true  and we output b  since we found one that is true we don't  have to continue on  and we end up terminating our program  in this tutorial we are going to learn  about de morgan's laws and how they  apply to computer science and  programming  if we were doing boolean algebra we  would probably write them like this  however for the purpose of this video  we're going to use these english  equivalents  not  a or b  is equivalent to not a  and not b  and the second one not a and b  is equivalent to  not a  or  not b  let's look at this venn diagram  so this a covers everything in the a set  this b covers everything in the b set  this area here covers everything that's  both in the a and b set and this here  covers everything that's outside of both  the a and the b set  let's look at the first law  so  not a or b  so a or b would be anything in these two  circles so not a or b would be anything  outside of these two circles  and let's look at the equivalent not a  and not b well everything outside of  these two circles is not a  and it's also not b  so we can say these two are equivalent  now let's examine the second law so we  have not a and b  well a and b would be this area inside  here so everything but this area inside  here would be not a and b  we can look at the equivalent  well this area is not a  and this area is not b  and this area is both not a and not b so  the only area that isn't not a or not b  is this area here everything else is  either not a or not b  now let's look at these tables so this  is looking at some equivalents if a and  b are booleans  here we're using the exclamation point  for a not the double ampersand for and  and the double vertical line for or as  is done in many programming languages  so here we see not a and b so what we're  going to do is we're going to reverse  everything inside the parentheses we  reverse a to not a  reverse and to or and reverse b to not b  here we have not a or b so we reverse a  to not a reverse or to and reverse b to  not b  here's an example  not a equals b  so we can reverse  a to not a  equals to not equals and b to not be now  traditionally when we want to simplify  not a equals b  we do it like this which is this this  and this are all equivalent  now a and b could be numbers instead of  being boolean values  so here we have like not a is greater  than b  now we can't reverse a number so here  what we do is reverse the sign  a common mistake people make is they  think the opposite of greater than is  less than but the opposite of greater  than is less than or equal to  also the opposite of greater than or  equal to is just less than  let's look at a compound boolean  expression and see how we can come up  with a simplified equivalent using de  morgan's laws  so we have our not  outside some parentheses  a is greater than b or b is not equal to  a  let's start by making an extra copy of  this  we'll get rid of the not then we'll  reverse everything inside the  parentheses  so a is greater than b will become a is  less than or equal to b the or will  become an and  and the not equals will become an equals  so for any numerical values of a or b  these two will always come up with the  equivalent value either true for both of  them or false for both of them  let's look at another more complex  example now you see here there's two  sets of parentheses  let's separate this out and we're going  to color code the parentheses so the red  are the outer level and the green or the  inner level  i like to do every level of parentheses  as a separate type of problem and i'll  show you how we do that  we'll start by getting rid of the not  now we're going to reverse a equals b to  a is not equal to b  we'll reverse the or to an and  and then this inner parentheses we'll  just put a not in front of it  now we'll make a new problem  where we're going to apply this not to  this inner set of parentheses  so we'll take away the not  we'll reverse b is greater than or equal  to c to b is less than c  we'll reverse the or to an and  and we'll reverse the less than to a  greater than or equal to  so now for any numerical values for a b  or c  these expressions will always be  equivalent  they'll all either evaluate to true or  false  in this java tutorial we're going to  learn how to check equality of different  data types we'll discuss the different  methods and what happens behind the  scenes when you use each comparison  method with different data  some key facts to know  primitive data types can be compared  using double equals for example if we've  got two primitive variables we can say a  double equals b and that boolean  expression will return either true or  false  using double equals to compare to  reference also known as object type  variables will only check if they are  pointing at the same object not whether  if those two objects have equal values  also reference object type variables can  be compared using the equals method for  example a dot equals b for some classes  this will check if they're pointing at  the same object much like using double  equals in other classes it will check if  they are pointing at equivalent objects  and we'll discuss that more later  let's start by reviewing the eight  primitive data types in java boolean  care byte short int long float and  double we're going to have some examples  in the next part about how to compare  values of these data types  so let's write some code  first we'll declare an int a set equal  to three in b equals three double c  equals 3.0 double d equals 3.0 and then  boolean e equals false  we'll execute this code and we'll see  for primitive type variables all data  ends up on the stack now let's take a  look at some boolean expressions  we'll start out with a double equals b  this will evaluate to true because the  value of a on the stack is the same as  the value of b on the stack  next we'll look at this boolean  expression a is not equal to b which is  false because a is in fact equal to b  next let's take a look at this  expression c is equal to 3.0 so the  value of c on the stack is 3.0 so this  is true  here we're comparing a to d  now we see a and d are different data  types a is an int  d is a double however for this  comparison it will convert a to the  double 3.0 and 3.0 is equal to 3.0 so  this will evaluate to true  finally we have the expression c is  equal to e  so we're comparing 3.0 to the boolean  value false  this is going to generate an error  because there's no way for the compiler  to compare a numerical value to a  boolean value  now let's move on and talk about  comparing objects  we can use double equals to compare to  reference object type variables but this  will only tell us if the two variables  are pointing at the same object which is  generally not what we want to know  we can also compare two reference object  type variables using the equals method  for example a dot equals b  for some classes the equals method is a  shallow comparison it only checks if the  two variables are pointing at the same  object so it works similar to double  equals  for other classes the equals method is a  deep comparison meaning it checks if the  data and the two objects are the same so  it's important to know depending on the  object type you are dealing with is the  equals method a deep comparison or is it  a shallow comparison  there's two ways to declare and  initialize strings in java and they  affect how the data ends up on the heap  the first and most common way is we say  string name of the variable then set  equal to a string literal  in this case we place the reference  variable on the stack  and then we place the string in a string  pool on the heap  now we're going to declare string b and  also set equal to coffee and something  interesting happens before creating a  new object  the java virtual machine  checks and sees there's already an  equivalent string on the heap  so what it's going to do is create b and  have it point at the same  value  now there's another way we can declare  and initialize strings we can say string  and the name of the variable equals new  string and then put the string literal  in there  in this case it's going to create  individual objects outside of the string  pool on the heap  now let's look at a couple of boolean  expressions  here we start with a double equals b  so this is going to check are a and b  pointing at the same object and in this  case they are because of the way we  declared and initialized a and b so this  will evaluate to true  now we declared and initialized c a  little bit differently so when we  compare a to c they are pointing at  different objects on the heap so this  boolean expression will evaluate to  false  now let's take a look at what happens  when we use the equals method  with strings the equals method is a deep  comparison so we're going to check is a  and b pointing at equivalent objects  this is the same object so of course  they're equivalent and this will return  true  now we do a equals c  so we see a and c are pointing at  equivalent objects even though they are  in different memory locations so this  will also return true  finally let's take a look at how we  could actually use some of these  comparisons in code  so here let's assume a and b are  primitive type variables so we want to  compare them using double equals and not  equals here let's assume that c and d  are object type variables where the  equals method is a deep comparison so in  that case we want to compare them using  the equals method like c dot equals d  for e and f  we're assuming that they're arrays so  the proper way to compare them is using  arrays dot equals and then our two  variables that are pointing at arrays  some final things to remember  we use the double equals to compare  primitive data types  some object types can be accurately  compared using the equals method you  have to know for that particular object  type is it a shallow comparison or a  deep comparison  other objects may have alternative  methods to compare their contents like  arrays use arrays.equals  for some objects there may not be an  easy way to compare them and that was  just how the programmers designed them  thanks for watching please hit the like  button and then leave me a comment down  below  to see the next video click on the image  on the left side of the screen to see  the entire playlist for the series click  on the image on the right side of the  screen and to keep up to date on all the  latest content hit the subscribe button  in the middle