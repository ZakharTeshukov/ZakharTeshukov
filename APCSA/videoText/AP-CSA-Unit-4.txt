welcome to the new ap computer science a  series for unit 4.  if you want to jump ahead to a specific  topic check out the time markers in the  video description  also i will be adding to and updating  this series so make sure to hit the  subscribe button to keep up to date on  all the latest content  we'll start by learning about for loops  for loops let us repeat a command or  commands  each for loop declares a variable that  acts as a counter  the counter variable will monitor the  progression of the loop but can also be  used inside the loop for various  purposes  let's start by declaring a for loop  the header of the for loop has three  parts  the first part declares and initializes  a variable that acts as a counter  the second part the test expression  checks to see if the for loop will  continue  finally the update for the variable will  happen at the end of each cycle of the  for loop in this case i will be  incremented by one  let's add some code inside the body of  the loop  in this case we're going to print out  the value of the counter variable i  let's trace out this loop  we'll start by declaring into i and  setting it equal to zero  next we check is i less than four it is  so we may continue with the loop  we print off the value of i which is in  this case zero  at the end of the loop we increment i  by one to become one  next we check is i still less than four  it is so we may continue the loop  we again print off the value of i in  this case one  at the bottom of the loop we again  increment the value i by one in this  case to two  we check is i still less than four it is  so we may continue with the loop  we print off the value of i which is two  we increment the value of i to three  we check is i still less than four it is  we print off the value of i which is  three  we increment the value of i by one and  now becomes four  we check is the value of i  less than four it is no longer less than  4 this boolean expression is false so we  terminate the loop and continue on to  any code after the loop  next we'll talk about while loops and do  while  loops while loops repeat commands while  a boolean expression remains true  do while loops checks the boolean  expression at the end of the loop and  will always run at least once  let's look at a very simple while loop  this one while true will always evaluate  to true so the body of the loop will  execute forever  now let's look at a slightly more  complex while loop  this one says while i is greater than  zero  we see i is initialized to four  so it will run  execute the code in the body go back up  to the top evaluate to true again  because the value i is never changed  inside the body of the loop this loop  will also run forever  now let's make a change  we add a command to decrement the value  of i  as such the loop will no longer run  forever  actually we could have written a very  similar loop using the for loop let's  take a look at that  here we have four  start off i equal to four  we continue running as long as i is  greater than four  and at the end of each loop we decrement  the value of i by one  let's try tracing out this while loop  we start by declaring i and initializing  it to four  next we check is i greater than zero  a while loop doesn't necessarily run  even one time  if this first evaluates to false we will  skip over the entire body of the while  loop  since this evaluates to true we will  continue on and execute the body of the  while loop  system out print line i which is  currently equal to four  then we decrement the value of i by one  then we go back to the top check is i  still greater than zero it is continue  on into the body of the loop again  output the value of i which is three  decrement i by one  go back and check is i still greater  than zero it is  output the value of i  decrement the value of i  back up to the top to check if i is  still greater than zero it is  output the value of i  decrement the value of i which is now  zero  go back up to the top c is i still  greater than zero this boolean  expression is now false so we will  terminate the loop and continue on with  any code afterwards  as i mentioned before we could have  written this as a for loop  let's look at a piece of code where it  makes a little more sense to use a while  loop  here we are having the user guess the  value of a secret number in this case 23  and they'll have to keep guessing until  they get the right answer  we initialize user guess equal to zero  while user guess the variable is not  equal to the secret number 23 this loop  will continue executing  inside the body of the loop it'll ask  guess what the number i'm thinking of  it will take user input  and put the value into the user guess  variable go back up to the top and see  if user guess is still not equal to 23  the loop will keep repeating until user  guess is 23  then the loop will terminate  and the code after it will execute that  says you got it right  another kind of loop that is not  required for the ap computer science a  exam but is still very useful is the do  while loop  a do while loop checks the boolean  expression at the end of the loop  as such a do while loop will always  execute at least one time  let's look at this example  we have int i equals negative two it  says do  so we'll execute system out print line i  decrement i by one  then we check is i greater than zero it  is not so we terminate the loop and  continue onwards  note that at the end of the while in a  do while loop we have a semicolon  here we're going to discuss how to write  an algorithm  that uses a for loop and the substring  method in the string class  to reverse the letters in a string  so let's start by creating the string  that we're going to reverse i'm going to  call it string  original and i'm going to set it equal  to the word pupils  and this could be set to anything we  want  next i'm going to make an empty string  that's going to hold the reversed  characters so we're going to say string  reverse  and i'm going to set it equal to quote  unquote so this is a string of size 0  there's not even a space in there but it  is initialized  next what we have to do is we have to  make a for loop so the for loop is going  to go through the original string  backwards  and then add each individual character  onto the end of the reverse string  so we're going to say 4  int i that's our counter variable  equals original which is the name of the  string we're reversing dot length open  close parenthesis when we're taking the  size of a string we've got to use dot  length open close parenthesis and we've  got to say -1  and the reason we're starting i is the  length minus one is that internally  strings are arrays so that means they  start out at index zero so the length of  the string is six we have one two three  four five six  but the first character is at index zero  then one two three four five so even  though it's a size six we're starting at  index five so that's the minus one  we're going to continue as long as i  is greater than or equal to zero because  we wanna go all the way back to index  zero  and each time through the loop we want  to decrease the value of i by one  now we'll put in the curly brackets to  show where we start and end the body of  the for loop  and each time we go through the for loop  we want to  say reverse  equals  whatever reverse is so far  first time through reverse will be empty  then plus original  dot sub string  then we'll say i comma i plus one so  this is only going to get one character  at a time and that's because substring  when we have two  arguments this is the starting position  which is inclusive and this is the  ending position which is exclusive so we  start at i  but we end  one before i plus one so substring is  inclusive exclusive so this is only  going to get us  one character the character at index i  so it's going to go through and it's  first going to pull out s and add it  onto reverse then it's going to pull out  l and add it on to reverse all the way  up to the first character  so after the for loop is done let's try  it out and see if reverse is  pupils reversed so it's going to say  system  out print line  and we will say reverse  now i'm not putting this in quotation  marks because i don't want the word  reverse i want to print out whatever is  in the variable reverse if i wanted to  print out the word reverse  i would put quotation marks around it  let's get rid of those quotation marks  and let's run the program  and there we go  pupils reversed is slip up  so that is one way we can reverse the  value in the string in this section  we're going to learn about nested loops  some important facts a nested loop is a  loop that is declared inside another  loop it could be a for loop a while loop  a do while loop  doesn't matter as long as it's a loop  inside a loop  each time the outer loop runs once the  inner loop will go through a complete  cycle  and a complete cycle can depend on the  particulars of the inner loop and we'll  look at an example in a little bit  nested loops can be useful when working  with two-dimensional arrays  so let's take a look at some code we  have a class we call it nested loop and  then we have a main method so inside the  main method we have our outer loop  and the outer loop starts off i at zero  and will go as long as i is less than  two so this one will go through two  times it'll go through while i is zero  while i is one and when i hits two it  terminates  now here we have our inner loop  and our inner loop we're using the  counter j we've got to have a different  counter for the outer loop in the inner  loop j starts out at zero and we'll  continue as long as j is less than three  so this inner loop will loop through  three times when j is zero j is one and  then j is two  now every time the outer loop goes  through once the inner loop will go  through three times  so in total two times three the inner  loop will run six times  so let's trace this out and see what  happens  we'll start by  declaring i equal to zero place it on  the stack  next we'll check is i less than two it  is so we continue this outer loop  so the first line of code inside the  outer loop is the declaration for the  inner loop so we declare j and set it  equal to zero place it on the stack  next we check is j less than three it is  so we continue the inner loop  then inside the body of the inner loop  we say system out print and a pound sign  and a space that goes to the output  next we get to the bottom of the inner  loop which means we increment because j  plus plus will increment j by one so now  j moves up to one  then we check is j less than three it is  so we keep going  inside the body we print off another  pound in the space  get to the end of the inner loop we  increment a by one j becomes two  then we check is j less than three it is  so we keep going  we print off another pound in the space  into the output  get to the end of the inner loop we  increment j to three  next  we check is j less than three it is not  so we terminate the inner loop  and that pops  the j variable off the stack  so we get to the end of the outer for  loop which means we increment i by one  so i becomes one  then we check  is i less than two it is  so we continue again through the body of  the outer loop  so then we restart the inner loop we set  j back equal to zero  then we check is j less than three it is  so we continue the body of the inner  loop we print off pound and the space  then we get to the end of the inner loop  so we increment j by one so j becomes  one  then at the top of the loop we again  check is j less than three it is so we  keep going  we execute the body of the inner loop we  print off another pound and a space  get to the bottom of the inner loop so  we increment j by one j becomes two  then we check is j still less than three  it is so we keep going  we print off another pound and a space  get to the bottom of the inner loop  increment a by one j becomes three  we check is j less than three  that's false three is not less than  three so we terminate the inner loop  we pop j off the stack get to the end of  the outer loop so we increment i by one  i becomes two  we check is i less than two it is not  so then we terminate the outer loop  and we finish our program  as mentioned before while we did do a  for loop inside a for loop here we could  have used any types of loops we wanted a  while loop a do-while loop often we'll  have more complicated algorithms inside  one of the loops we might have an  if-else statement so there's all sorts  of neat algorithms we can write using  nested for loops and we'll learn about  some of those in future videos  thanks for watching please hit the like  button and then leave me a comment down  below  to see the next video click on the image  on the left side of the screen to see  the entire playlist for the series click  on the image on the right side of the  screen and to keep up to date on all the  latest content just a subscribe button  in the middle