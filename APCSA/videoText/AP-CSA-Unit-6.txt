hello  welcome to the new ap computer science a  series in java this is unit 6 on arrays  if you want to jump ahead to a specific  topic check out the time markers in the  video description  also i will be adding to and updating  this series so make sure to hit the  subscribe button to keep up to date on  all the latest content  let's start by thinking about what a  variable is  a variable is like a container it can  hold different things like an int  or a double  or even an object like a string however  it can only hold one value at a time  now we introduce arrays which are like  one container with separate compartments  this would be considered an array of  size three because it's got one two  three compartments  we identify each compartment with its  index number so this would be index zero  this would be index one this would be  index two and each of these compartments  can hold a different value  let's think of a time when it would be  more efficient to use an array  let's say we want to write a program  that kept track of how many runs each  team scored in a baseball game  so for a standard length game of nine  innings we'd have nine variables for the  home team  and nine variables for the visitor  this could be doable but this is a lot  of variables to keep track of  on the other hand  if we used arrays we could have one  array for the home team with one index  for each inning and one array for the  visiting team with one index for each  inning it's a lot more efficient to  program and to debug  now let's move on to see how we can  implement arrays in java  arrays can hold multiple different  values of the same data type in one  variable  arrays are objects but their indexes may  hold primitive types or reference types  arrays in java and most languages start  off at index 0.  let's look at the two ways we can create  arrays  first we can declare the variable type  add a set of square brackets letting the  compiler know that this variable will  point to a one-dimensional array  and have the variable name  next we say that we are creating a new  whatever data type  and then the number of indexes inside  square brackets  this could be done on two lines where we  declared the variable on one line and  initialized it on the next if we don't  specify the values in this case they  will default to 0 because it is an int  if it were a double array they would  default to 0.0  if it were a boolean array they would  default to false and if it was any type  of object array the values would default  to null  another way to create an array is again  variable tita type  square brackets indicating a  one-dimensional array and variable name  and then set it equal to a hard coded  array  this array is size 4 because it has four  elements  separated by commas with curly brackets  at the beginning and the end  let's see how we can change the values  inside an index  this command says we want to change  index 2  of the array x is pointing at to 12.  index 0 1 2. is changed to 12.  let's look at another line of code  this is saying we want to change index 4  at whatever array y is pointing at to  21.  0  1 2 3 4.  there is no index 4 so we're going to  get an out of bounds exception and the  program will crash  if we want to access data inside the  variable we do it like any other  variable except not only do we specify  the variable name but we specify what  index we want to access  this line of code will print out  whatever value is in y index 1. in this  case that will be 5.  next we're going to review how primitive  data types are stored in memory and then  we're going to look at how array objects  are stored in memory and why that  matters for this demonstration we've got  three boxes the first will represent our  code  the second will represent the data  structure of the stack  and the third will represent the data  structure the heap  stacks start off at the bottom and go up  to the top  however when you are tracing your own  code or code for a quiz or test i  recommend you start off at the top and  go to the bottom because it makes things  a little simpler  our first line of code we declare a  variable a of type int and set it equal  to 3.  since a is a primitive type all data is  stored on the stack  next we declare a variable b of type int  and set it equal to a  since they are primitive types we simply  copy the data from a to b and b gets its  own unique entry on the stack  here we modify b to equal one hundred  we simply change the entry on the stack  for b to equal one hundred  next we're going to take a look at some  reference type variables c is a  reference type variable  we declare c  as an integer array  integer arrays are objects  so on the stack we set c equal to a  pointer to an object on the heap  the value of this object is an array of  size 4 with values 1 2 3 and 4 in  indexes 0 1 2 and 3.  remember the only data stored in c on  the stack is the pointer  next we declare a variable d also of  integer array type and set it equal to c  we're going to copy the data from the  stack to d  however this simply means we are copying  a pointer  now c and d are both pointing to the  same object on the heap  this line of code has us reach into the  object on the heap and change index 1 to  equal 99.  since c and d are both pointing to the  same object this ends up affecting both  c and d  here we are changing d again however we  are causing d to point at a brand new  object an integer array of size 5.  we move the pointer for d to point at  the new integer array  c and d no longer have a connection  because they are pointing at different  objects on the heap  here we are declaring another integer  array e  and having it point at a new object on  the heap  next we create an integer array f and  have it point to an identical object on  the heap  notice even though the values are the  same  they are separate objects on the heap  when we change the value in index 1 of  the object f is pointing at to 98  it only affects f because e and f are  pointing at different objects on the  heap  next you'll learn about traversing an  array which is going over each index  using a loop some important facts to  know  arrays in java and most languages start  at index 0.  that means the first index will actually  be index 0.  dot length will return the number of  indexes in an array  since the indexes start at index 0 that  means an array of size 5 will have  indexes 0 1 2  3 and 4.  you can traverse an array  with a for loop or a for each loop  let's start writing some code  here we're declaring an array x  and setting it equal to  2158 and here we can see the reference  variable x on the stack and the array on  the heap  now let's write some code to traverse it  with a for loop so we see we're starting  by declaring our counter variable into i  and setting it equal to zero  we're going to continue the loop as long  as i is less than x dot length so in  this case x dot length is going to  return four because this array has a  size of four  at the end of each loop we're going to  increment i by 1. i plus plus is short  for i equals i plus 1.  inside the loop we're going to print out  x index i  and then a space so all the numbers  don't run together  so let's trace this out  we'll start by declaring i and setting  it equal to 0 and that gets placed on  the stack  now we're going to check is i less than  x dot length  so 0 is less than 4 so this is true we  continue along with the loop  then we print out x index 0  which is the number 2 and a space  we get to the end of the loop so we  increment i to 1. so now i equals 1 and  we're going to be looking at index 1 on  the array  we check is i less than x dot length  1 is less than 4 so we continue  we print out x index i index i is one so  we print out the number one which is an  index one  and then a space  get to the end of the loop increment i  by one now i equals two  we check is i still less than the length  of the array it is so we continue the  loop  we print out x index two which is five  and then a space  now we increment i to  three we check is 3 less than the length  of x which is 4 so that's true  we print out x index 3 which is the  number 8  and then a space  we increment i to 4  we check is 4 less than the length of  the array so is 4 less than 4 it is  false  so we terminate the loop  so now we've gone through the loop and  we've printed out the contents of the  array  now let's look at some modifications we  can make to the for loop  here we're incrementing by two instead  of one so every time we get to the end  of the for loop we set i equal to i plus  two so i'll start out at zero go to two  and then go to four  let's look at another modification we  could start out our counter i at one so  we'd start by printing out index one and  then continue on like that  another modification we could make to  this code is instead of printing out the  data we could modify the data so here  we're taking the data inside x index i  multiplying it by 2  and taking the product and returning it  back into x index i  so if we ran this code it would go  through the array and double the data  inside each index  now let's look at a way to traverse the  array using a for each loop you can see  a four each loop has two parts  the first part is a temporary variable i  named mine t  the temporary variable has to be of the  data type that's inside the array so  since this is an array of ins i've made  my temporary variable an int  then we have a colon and then we have  the name of the array in this case x a  for each loop will go through one time  for each index in an array  each time it goes through  the temporary variable will hold the  value inside each of the indexes  so the first time through t will hold  two the second time through it'll hold  one and so on so let's trace this out  we start by declaring t  and setting it equal to the value inside  index zero so t equals two  now we're going to print off t and a  space  now we'll move t to index one so t will  hold the number one  then we'll print off the value of t  which is one  we'll go through again p will take out  the value five  then we print off the value of t  our last time through t will pull out  the value 8  then we'll print off the value t  there are some limitations to the for  each loop  with the for loop we could skip certain  indexes but a for each loop will go  through  all of the indexes in the array  also in a for loop we were able to  modify the data inside the indexes and  we can't do that with a for each loop  well a for each loop can be easier to  use its limitations mean it might not be  appropriate in certain circumstances  next you're going to learn an algorithm  for reversing the values in an array  an array can be reversed by swapping  values in the first half with values in  the corresponding indexes in the second  half  this is the algorithm we're going to  learn today  values can also be swapped by copying  values to the opposite index in a  temporary array  however this algorithm may not be  allowed in certain free response  questions in the ap computer science a  exam  let's write some code we'll start by  declaring a variable x and setting it  equal to a new inter array of size five  next let's look at the algorithm for  swapping  we have a for loop we start off the  counter variable i  at zero  because arrays start off with their  first index 0.  next we go through half the array  x dot length divided by 2  in this case is 2 because an array of  size 5  divided by 2 is 2.5 however with int  division we lose the decimal portion of  the number  at the end of the loop we increment the  counter variable i by one  inside the loop we start by declaring a  temp variable  and copying the value from x index i  into it  next we copy the value from the index  opposite x index i into x and x i  and then finally we copy the value from  temp into the index opposite x index i  let's trace out this code to see how it  works  we start by declaring a variable i  and setting it equal to zero  next we check is i which is zero right  now less than x dot length divided by  two which is two  this is true so we can continue on  through the loop  we create a temp variable and copy the  value from x index i which is in this  case index 0 into the temp variable  next we copy the value from the index  opposite x index i  into x index i  finally we copy the value from temp into  the index opposite x index i  at the end of the loop we increment i by  1 bringing i to 1.  we check is i still less than x dot  length divided by 2 it is so we continue  we create the temp variable and copy the  value from x index i which is in this  case 1  into the temp variable  we copy the value from the index  opposite x index i in this case index 3  into x and x i  and finally we copy the value from the  temp variable into the index opposite x  and x i  at the end of the loop we again  increment i to be 2.  we check is 2 still less than 2 this is  no longer true so we terminate the loop  and continue on with any code afterwards  next you'll learn an algorithm to find  the largest number in an array  you can modify the code slightly to  instead find the smallest number  so i've created a class i called it find  largest and then i made a basic main  method here  inside the main method i've created an  array of ins i've got some values here  the first thing we have to do is we have  to create a variable i'm going to call  it largest to hold the largest value  now i've made the variable an int  because it's an array events if this  were an array of doubles we'd make  largest a double type variable  now we have to set it equal to something  so we're going to set it equal to the  first value because we don't know what  the largest is going to be so the good  place to start is with the first value  which is at index 0. so we're going to  say an array  index 0. so after this line of code  largest will be equal to negative two  now what we have to do is we have to  make a for loop to traverse the entire  array and look for something larger than  negative two  so we're going to say 4  we'll start our counter variable i equal  to 0.  we'll continue as long as i is less than  and array dot length  notice there's no open close parenthesis  after that another semicolon and at the  end of each loop we'll say i plus plus  so we'll increase i by one every time we  go through the loop  let's make an open and close curly  bracket  to show where the loop begins and ends  now what we need to do is we need to  check  each value in the array to see if it's  larger than what largest currently is  so i'm going to say if  and array  index i  so i will be changing as we go through  this loop so it's going to start off  here and then there and then there and  all the way through the loop if whatever  is in index i of an array  is larger  than what's currently in largest then we  have to change largest so we're going to  say  largest  equals  and array  index  i  so we'll you know start off with largest  equal negative 2 then we find out oh  one's bigger so we set large is equal to  1  then we go to 6 and we say oh 6 is even  bigger so then we set largest equal to  6. we keep doing that until we go all  the way through the array  so now at the end of the for loop  largest is in this case can equal 10  because that's the largest number in  this array so let's print out that value  so we're going to say system  out print line  and we'll say largest  so let's run this and see that we get to  10.  so we'll say run  and there we go it's 10. now i'm going  to change this up a little bit i'm going  to make the 660  so now i'm going to run it again  and now the largest is 60. so that's how  we can find the largest value in a java  array.